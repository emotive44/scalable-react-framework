@import 'functions.scss';
@import 'variables.scss';


@mixin set-background($color) {
  background-color: $color;
  color: set-text-color($color);
}

@mixin break-points($point, $pixels: none) {
  @if ($point == 'desktop-large') {
    @media(max-width: $breakpoint-desktop-large) {
      @content;
    }
  } 
  @else if ($point == 'desktop') {
    @media(max-width: $breakpoint-desktop) {
      @content;
    }
  } 
  @else if ($point == 'tablet') {
    @media(max-width: $breakpoint-tablet) {
      @content;
    }
  } 
  @else if ($point == 'phone') {
    @media(max-width: $breakpoint-phone) {
      @content;
    }
  }
  @else if ($point == 'custom') {
    @media(max-width: $pixels + px) {
      @content;
    }
  }
}

@mixin background-hover($base, $hover) {
  @include set-background($base);

  @if($base == transparent) {
    color: $hover;
  }

  &:hover {
    @include set-background($hover);
  }
}

@mixin theme($themes) {
  @each $theme, $map in $themes {
    :global(.theme--#{$theme}) & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@mixin fade($type, $duration: 0.5, $opacity: 1) {
  @if ($type == 'hide') {
    opacity: 0;
    visibility: hidden;
    transition: ease-in-out #{$duration}s;
    transition-property: visibility opacity;
  }
  @else if ($type == 'show') {
    opacity: $opacity;
    visibility: visible;
    transition: ease-in #{$duration}s;
    transition-property: visibility opacity;
  }
}

@mixin position($position: absolute, $top: null, $right: null, $bottom: null, $left: null, $z-index: 0) {
  position: $position;
  z-index: $z-index;
  bottom: $bottom;
  right: $right;
  left: $left;
  top: $top;
}
